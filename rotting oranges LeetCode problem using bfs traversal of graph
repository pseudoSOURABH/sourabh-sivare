struct node{
    
    int x,y,time;
    
    node(int a,int b,int t)
    {
        x=a;
        y=b;
        time=t;
    }
};


class Solution {
public:
    int max(int a,int b)
{
    if(a>b)
        return a;
    return b;
}
    
    int orangesRotting(vector<vector<int>>& grid) {
        
        int count=0;
        int n=grid.size();
        int m =grid[0].size();
        queue<node>q;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==2)
                {
                    q.push(node(i,j,0));
                }
                if(grid[i][j]!=0)
                {
                    count++;
                }
            }
        }
        
        int ans=0;
        int cnt=0;
        while(!q.empty())
        {
              int x=q.front().x;
              int y=q.front().y;
              int t=q.front().time;
        
              q.pop();
              cnt++;
              ans=max(ans,t);
        
              int dx[]={1,0,-1,0};
              int dy[]={0,-1,0,1};
            
              for(int id=0;id<4;id++)
              {
                  int newx=x+dx[id];
                  int newy=y+dy[id];
                  
                  if(newx<n && newx>=0  && newy<m && newy>=0 && grid[newx][newy]==1)
                  {
                      grid[newx][newy]=2;
                      q.push(node(newx,newy,t+1));
                  }
              }
         
        
            
        }
        
        if(cnt==count)
            return ans;
        return -1;
        
    }
};
